{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":80630,"databundleVersionId":8654115,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-03T16:57:18.76353Z","iopub.execute_input":"2024-06-03T16:57:18.763968Z","iopub.status.idle":"2024-06-03T16:57:19.25692Z","shell.execute_reply.started":"2024-06-03T16:57:18.763935Z","shell.execute_reply":"2024-06-03T16:57:19.255677Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","metadata":{"execution":{"iopub.status.busy":"2024-06-03T16:57:21.328978Z","iopub.execute_input":"2024-06-03T16:57:21.329519Z","iopub.status.idle":"2024-06-03T16:57:21.581683Z","shell.execute_reply.started":"2024-06-03T16:57:21.329489Z","shell.execute_reply":"2024-06-03T16:57:21.58026Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data=pd.read_csv(\"/kaggle/input/dev-comm-ml-recruitment/train.csv\",index_col='id')\ntrain_data.columns","metadata":{"execution":{"iopub.status.busy":"2024-06-03T16:57:24.865579Z","iopub.execute_input":"2024-06-03T16:57:24.866113Z","iopub.status.idle":"2024-06-03T16:57:25.481098Z","shell.execute_reply.started":"2024-06-03T16:57:24.86608Z","shell.execute_reply":"2024-06-03T16:57:25.479656Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-03T16:57:27.65594Z","iopub.execute_input":"2024-06-03T16:57:27.656358Z","iopub.status.idle":"2024-06-03T16:57:27.688178Z","shell.execute_reply.started":"2024-06-03T16:57:27.656325Z","shell.execute_reply":"2024-06-03T16:57:27.686814Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.scatterplot(data=train_data,x=\"longitude\",y=\"latitude\",hue='daynight')","metadata":{"execution":{"iopub.status.busy":"2024-06-03T12:44:17.449986Z","iopub.execute_input":"2024-06-03T12:44:17.45054Z","iopub.status.idle":"2024-06-03T12:44:26.575507Z","shell.execute_reply.started":"2024-06-03T12:44:17.450504Z","shell.execute_reply":"2024-06-03T12:44:26.5741Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.scatterplot(data=train_data,x=\"brightness\",y=\"confidence\",hue='daynight')","metadata":{"execution":{"iopub.status.busy":"2024-06-01T10:58:17.648455Z","iopub.execute_input":"2024-06-01T10:58:17.648847Z","iopub.status.idle":"2024-06-01T10:58:30.233592Z","shell.execute_reply.started":"2024-06-01T10:58:17.648816Z","shell.execute_reply":"2024-06-01T10:58:30.232361Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.lmplot(data=train_data,x=\"brightness\",y=\"confidence\",hue='daynight')","metadata":{"execution":{"iopub.status.busy":"2024-06-01T11:06:01.610126Z","iopub.execute_input":"2024-06-01T11:06:01.610639Z","iopub.status.idle":"2024-06-01T11:06:20.03362Z","shell.execute_reply.started":"2024-06-01T11:06:01.610506Z","shell.execute_reply":"2024-06-01T11:06:20.032437Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.scatterplot(data=train_data,x=\"brightness\",y=\"confidence\",hue='satellite')","metadata":{"execution":{"iopub.status.busy":"2024-06-01T10:59:32.475337Z","iopub.execute_input":"2024-06-01T10:59:32.476172Z","iopub.status.idle":"2024-06-01T10:59:45.212661Z","shell.execute_reply.started":"2024-06-01T10:59:32.47613Z","shell.execute_reply":"2024-06-01T10:59:45.211457Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.scatterplot(data=train_data,x=\"scan\",y=\"confidence\")","metadata":{"execution":{"iopub.status.busy":"2024-06-01T11:01:48.992072Z","iopub.execute_input":"2024-06-01T11:01:48.993059Z","iopub.status.idle":"2024-06-01T11:01:49.972806Z","shell.execute_reply.started":"2024-06-01T11:01:48.993021Z","shell.execute_reply":"2024-06-01T11:01:49.970825Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.scatterplot(data=train_data,x=\"track\",y=\"confidence\")","metadata":{"execution":{"iopub.status.busy":"2024-06-01T11:01:52.532717Z","iopub.execute_input":"2024-06-01T11:01:52.533114Z","iopub.status.idle":"2024-06-01T11:01:53.493962Z","shell.execute_reply.started":"2024-06-01T11:01:52.533083Z","shell.execute_reply":"2024-06-01T11:01:53.492477Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.scatterplot(data=train_data,x=\"bright_t31\",y=\"confidence\")","metadata":{"execution":{"iopub.status.busy":"2024-06-01T11:02:45.105673Z","iopub.execute_input":"2024-06-01T11:02:45.106084Z","iopub.status.idle":"2024-06-01T11:02:46.255154Z","shell.execute_reply.started":"2024-06-01T11:02:45.10605Z","shell.execute_reply":"2024-06-01T11:02:46.253107Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.scatterplot(data=train_data,x=\"frp\",y=\"confidence\",hue='daynight')","metadata":{"execution":{"iopub.status.busy":"2024-06-01T11:30:48.600934Z","iopub.execute_input":"2024-06-01T11:30:48.601321Z","iopub.status.idle":"2024-06-01T11:31:00.371161Z","shell.execute_reply.started":"2024-06-01T11:30:48.601289Z","shell.execute_reply":"2024-06-01T11:31:00.369663Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_data=pd.read_csv(\"/kaggle/input/dev-comm-ml-recruitment/test.csv\",index_col='id')\ntest_data.columns","metadata":{"execution":{"iopub.status.busy":"2024-06-03T16:57:35.975397Z","iopub.execute_input":"2024-06-03T16:57:35.975812Z","iopub.status.idle":"2024-06-03T16:57:36.109624Z","shell.execute_reply.started":"2024-06-03T16:57:35.975777Z","shell.execute_reply":"2024-06-03T16:57:36.108278Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-03T16:57:38.887181Z","iopub.execute_input":"2024-06-03T16:57:38.888442Z","iopub.status.idle":"2024-06-03T16:57:38.915132Z","shell.execute_reply.started":"2024-06-03T16:57:38.888397Z","shell.execute_reply":"2024-06-03T16:57:38.913695Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\n# Select target\ny = train_data.confidence\nX = train_data.drop(['confidence','instrument','version','acq_date'],axis=1)\n\n# Divide data into training and validation subsets\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, random_state=0)\nprint('done')\n# checking accuracy of the model\n# model = RandomForestRegressor(random_state=0)\n# model.fit(X_train, y_train)\n# preds = model.predict(X_valid)\n# mean_absolute_error(y_valid, preds)","metadata":{"execution":{"iopub.status.busy":"2024-06-03T16:57:51.142852Z","iopub.execute_input":"2024-06-03T16:57:51.143552Z","iopub.status.idle":"2024-06-03T16:57:51.315698Z","shell.execute_reply.started":"2024-06-03T16:57:51.143505Z","shell.execute_reply":"2024-06-03T16:57:51.314389Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"object_cols = [col for col in X_train.columns if X_train[col].dtype == \"object\"]\n\n# Columns that can be safely ordinal encoded\ngood_label_cols = [col for col in object_cols if \n                   set(X_valid[col]).issubset(set(X_train[col]))]\n        \n# Problematic columns that will be dropped from the dataset\nbad_label_cols = list(set(object_cols)-set(good_label_cols))\n        \nprint(object_cols)\nprint('Categorical columns that can be encoded:', good_label_cols)\nprint('\\nCategorical columns that will be dropped from the dataset:', bad_label_cols)","metadata":{"execution":{"iopub.status.busy":"2024-06-03T16:57:58.363032Z","iopub.execute_input":"2024-06-03T16:57:58.363464Z","iopub.status.idle":"2024-06-03T16:57:58.416611Z","shell.execute_reply.started":"2024-06-03T16:57:58.363433Z","shell.execute_reply":"2024-06-03T16:57:58.415115Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Get number of unique entries in each column with categorical data\nobject_nunique = list(map(lambda col: X[col].nunique(), object_cols))\nd = dict(zip(object_cols, object_nunique))\n\n# Print number of unique entries by column, in ascending order\nsorted(d.items(), key=lambda x: x[1])","metadata":{"execution":{"iopub.status.busy":"2024-06-03T16:58:01.902183Z","iopub.execute_input":"2024-06-03T16:58:01.902646Z","iopub.status.idle":"2024-06-03T16:58:01.939892Z","shell.execute_reply.started":"2024-06-03T16:58:01.902612Z","shell.execute_reply":"2024-06-03T16:58:01.938601Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import OneHotEncoder\n\ncategorical_cols = [cname for cname in X_train.columns if X_train[cname].dtype == \"object\"]\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X_train.columns if X_train[cname].dtype in ['int64', 'float64']]\n\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='constant')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\nprint('done')","metadata":{"execution":{"iopub.status.busy":"2024-06-03T16:58:04.660658Z","iopub.execute_input":"2024-06-03T16:58:04.661104Z","iopub.status.idle":"2024-06-03T16:58:04.686674Z","shell.execute_reply.started":"2024-06-03T16:58:04.66107Z","shell.execute_reply":"2024-06-03T16:58:04.6854Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model = RandomForestRegressor(n_estimators=460, random_state=0)\n\n# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', model)\n                             ])\n","metadata":{"execution":{"iopub.status.busy":"2024-06-03T16:58:28.29903Z","iopub.execute_input":"2024-06-03T16:58:28.299456Z","iopub.status.idle":"2024-06-03T16:58:28.306112Z","shell.execute_reply.started":"2024-06-03T16:58:28.299426Z","shell.execute_reply":"2024-06-03T16:58:28.30491Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n# Preprocessing of training data, fit model \nmy_pipeline.fit(X_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds = my_pipeline.predict(X_valid)\n\n# Evaluate the model\nscore = mean_absolute_error(y_valid, preds)\nprint('MAE:', score)\n\n# Evaluate the model using cross validation\nscores = -1 * cross_val_score(my_pipeline, X, y,\n                              cv=5,\n                              scoring='neg_mean_absolute_error')\n\nprint(\"\\nMAE scores using cross validation:\", scores, \"\\nThus average score:\" ,scores.mean())","metadata":{"execution":{"iopub.status.busy":"2024-06-03T12:45:35.911779Z","iopub.execute_input":"2024-06-03T12:45:35.912365Z","iopub.status.idle":"2024-06-03T13:30:11.27234Z","shell.execute_reply.started":"2024-06-03T12:45:35.912319Z","shell.execute_reply":"2024-06-03T13:30:11.270433Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#fitting with whole data\nmy_pipeline.fit(X, y)\nprint('done')","metadata":{"execution":{"iopub.status.busy":"2024-06-03T16:58:37.165153Z","iopub.execute_input":"2024-06-03T16:58:37.165619Z","iopub.status.idle":"2024-06-03T17:08:08.690157Z","shell.execute_reply.started":"2024-06-03T16:58:37.165575Z","shell.execute_reply":"2024-06-03T17:08:08.688521Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_test = test_data.drop(['instrument','version','acq_date'],axis=1)\ntest_preds=my_pipeline.predict(X_test)\nprint('done')","metadata":{"execution":{"iopub.status.busy":"2024-06-03T17:09:27.176884Z","iopub.execute_input":"2024-06-03T17:09:27.177345Z","iopub.status.idle":"2024-06-03T17:09:35.024346Z","shell.execute_reply.started":"2024-06-03T17:09:27.177299Z","shell.execute_reply":"2024-06-03T17:09:35.023019Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_preds","metadata":{"execution":{"iopub.status.busy":"2024-06-03T17:09:38.723549Z","iopub.execute_input":"2024-06-03T17:09:38.723955Z","iopub.status.idle":"2024-06-03T17:09:38.733455Z","shell.execute_reply.started":"2024-06-03T17:09:38.723926Z","shell.execute_reply":"2024-06-03T17:09:38.732182Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Save test predictions to file\nd=[]\nfor i in range(len(list(test_preds))):\n    d.append({'id': i+1,'confidence': test_preds[i]})\noutput = pd.DataFrame(d)\noutput.to_csv('HG_submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-06-03T17:10:36.744707Z","iopub.execute_input":"2024-06-03T17:10:36.745111Z","iopub.status.idle":"2024-06-03T17:10:36.961277Z","shell.execute_reply.started":"2024-06-03T17:10:36.745082Z","shell.execute_reply":"2024-06-03T17:10:36.959819Z"},"trusted":true},"execution_count":null,"outputs":[]}]}